-- Migration created by automated merge script
-- Create student_uploads table if it does not exist

CREATE TABLE IF NOT EXISTS student_uploads (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  student_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  faculty_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  title VARCHAR(255),
  description TEXT,
  file_path VARCHAR(1024) NOT NULL,
  original_filename VARCHAR(512),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  status VARCHAR(50) DEFAULT 'submitted',
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_student_uploads_faculty ON student_uploads(faculty_id);
CREATE INDEX IF NOT EXISTS idx_student_uploads_student ON student_uploads(student_id);

-- Enable Row Level Security (RLS)
ALTER TABLE student_uploads ENABLE ROW LEVEL SECURITY;

-- Create policies for RLS
-- Students can view and insert their own uploads
CREATE POLICY "Students can view their own uploads" ON student_uploads
  FOR SELECT USING (student_id = auth.uid());

CREATE POLICY "Students can insert their own uploads" ON student_uploads
  FOR INSERT WITH CHECK (student_id = auth.uid());

-- Faculty can view uploads assigned to them
CREATE POLICY "Faculty can view uploads assigned to them" ON student_uploads
  FOR SELECT USING (faculty_id = auth.uid());

-- Faculty can update status of uploads assigned to them
CREATE POLICY "Faculty can update uploads assigned to them" ON student_uploads
  FOR UPDATE USING (faculty_id = auth.uid());

-- Admins can view all uploads
CREATE POLICY "Admins can view all uploads" ON student_uploads
  FOR ALL USING (auth.jwt() ->> 'user_role' = 'admin');